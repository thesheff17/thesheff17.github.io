<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dan Sheffner Tech Info</title>
    <link>https://tech.sheffner.com/posts/</link>
    <description>Recent content in Posts on Dan Sheffner Tech Info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Jun 2020 09:52:12 -0500</lastBuildDate>
    
	<atom:link href="https://tech.sheffner.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Stitch MP4 files together</title>
      <link>https://tech.sheffner.com/posts/2020-06-24-stitch-mp4-files/</link>
      <pubDate>Wed, 24 Jun 2020 09:52:12 -0500</pubDate>
      
      <guid>https://tech.sheffner.com/posts/2020-06-24-stitch-mp4-files/</guid>
      <description>Recenty I bought a go pro hero 8. I have always been somewhat interested in photography and video production. Most of these devices produce seperate files even though its one continuous recording. What is even more frustrating is the time lapse feature is able to shove it all into 1 file. Why can&amp;rsquo;t the video files be 1 file? Go pro is also experiementing with 12GB files instead of 4GB files.</description>
    </item>
    
    <item>
      <title>Golang Testing</title>
      <link>https://tech.sheffner.com/posts/2020-05-30-golang-testing/</link>
      <pubDate>Sat, 30 May 2020 09:11:42 -0500</pubDate>
      
      <guid>https://tech.sheffner.com/posts/2020-05-30-golang-testing/</guid>
      <description>The more I manage devOps the more I need a way to test entire setups as things progress. Infrastructure testing as code. For example if you run a site at http://example.com/ you want to make sure it returns status 200. Create a new file called example_test.go All golang test files needs to be *_test.go
package main import ( &amp;#34;net/http&amp;#34; &amp;#34;testing&amp;#34; ) func TestSite(t *testing.T) { resp, err := http.Get(&amp;#34;https://golang.com&amp;#34;) if err !</description>
    </item>
    
    <item>
      <title>Golang Docs With Colors</title>
      <link>https://tech.sheffner.com/posts/2020-05-30-golang-docs-with-colors/</link>
      <pubDate>Sat, 30 May 2020 04:55:03 -0500</pubDate>
      
      <guid>https://tech.sheffner.com/posts/2020-05-30-golang-docs-with-colors/</guid>
      <description>I came across this tweet that mentioned this git repo.
I always used godoc on the terminal but then I saw it was capable of color highlighting. :)
go get -u github.com/inancgumus/godocc This is so nice to have: It isn&amp;rsquo;t perfect for example if you look at the fmt package you will see allot of things that should not be highlighted.
You can also change the styling by doing:
export GODOCC_STYLE=&amp;#34;dracula&amp;#34; </description>
    </item>
    
    <item>
      <title>AWS SAM (Serverless Application Model) With Typescript</title>
      <link>https://tech.sheffner.com/posts/2020-05-28-aws-sam-serverless-application-model-with-typscript/</link>
      <pubDate>Thu, 28 May 2020 15:29:00 -0500</pubDate>
      
      <guid>https://tech.sheffner.com/posts/2020-05-28-aws-sam-serverless-application-model-with-typscript/</guid>
      <description>More information for SAM can be located here.
Installation for mac and linux:
sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)&amp;#34; add to your .bash_profile
test -d ~/.linuxbrew &amp;amp;&amp;amp; eval $(~/.linuxbrew/bin/brew shellenv) test -d /home/linuxbrew/.linuxbrew &amp;amp;&amp;amp; eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv) test -r ~/.bash_profile &amp;amp;&amp;amp; echo &amp;#34;eval \$($(brew --prefix)/bin/brew shellenv)&amp;#34; &amp;gt;&amp;gt;~/.bash_profile echo &amp;#34;eval \$($(brew --prefix)/bin/brew shellenv)&amp;#34; &amp;gt;&amp;gt;~/.profile now install tools:
brew tap aws/tap brew install aws-sam-cli check version:
sam --version SAM CLI, version 0.52.0 if you need to upgrade package:</description>
    </item>
    
    <item>
      <title>Made With Hugo</title>
      <link>https://tech.sheffner.com/posts/2020-05-27-made-with-hugo/</link>
      <pubDate>Wed, 27 May 2020 21:16:12 -0500</pubDate>
      
      <guid>https://tech.sheffner.com/posts/2020-05-27-made-with-hugo/</guid>
      <description>This site is made with a static site generator named hugo.
Basic commands:
installation
brew install hugo at the time of writting this:
hugo version Hugo Static Site Generator v0.71.1/extended darwin/amd64 BuildDate: unknown start a new site:
hugo new site blog cd blog add a theme
git clone https://github.com/niklasbuschmann/contrast-hugo.git themes/contract-hugo add theme to config.yaml
echo &amp;#39;theme: &amp;#34;contrast-hugo&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.yaml add your first post:
hugo new posts/2020-05-27-my-first-post.md edit the contents of the post:</description>
    </item>
    
  </channel>
</rss>